 1x2-6x+9@0
11111111111
00000000000
0123456789a
^
^
10-length

o3solve(x = 0x0100):
	s[] = {0, /*1*/ 0, /*2*/ 0, /*3*/ 0, /*4*/ ?, /*5*/ ?, 0x0100}
	b = 10
	s[10] = d = 0x010a /*last char to process*/ is 0x0100+0x000a //528
	x += 1 is 0x0101 //529
	  
getpoly(x = 0x0101, s /* will use 2/5 slots for digits, fill in a0-a3 */):
	x <= s[10] is 0x010a //45
	get5bcd(x = 0x0101, &y /* value, number of digits in b */):
		y = 0 //114
	 	a = 0 //115
		peekdig(x = 0x0101, a /* changed from 0 to sign */):
			b = *x is '1' //22
		x += 1 is 0x0102 //121
		y -= 5 is -5 //122
		y += 6 is 1 //124
		b &= 0x0f is 1 //125
		s[-1] = b is 1 //126
		peekdig(x is 0x0102, a is 0):
			b = 'x' //22
		b is 'x' //131
		a is 0 //135
		d16pstv(y is 1, s):
			// return PC is at s[-3],s[-2]
			d0to32k(y is 1, s):
			s[-5] = x is preserved as 0x0102 //32
			x = 0 //33
			s[-7] = y is 1 //34
			d = &s[-2] //38
			b = d[y] is 1 //40
			x += b is 1 //41
			y -= 1 is 0 //42
			y = x is 1 //43
			d = s[-7] is 1 /* elements to pop */ //45
			x = s[-5] is preserved as 0x0102 //46
		s popped back to &s[0] //135
	b is 1 /* characters converted */ //48
	a = *x++ is 'x' (x is 0x0103) //50
	a -= 1 is 'w' //57
	a &= 0xc0 is 0x60 //58
	b = *x++ is '2' (x is 0x0104) //60
	'2' < '4' //64
	d = (b * 2) & 0x06 is '4' //71
	d += 2 is 6 //72
	d += s is &s[b - '0'] //74
	y is &s[b - '0'], d is 1 //75
        s[b - '0'] += y is 1 //76

	x <= s[10] is 0x010a //45
	get5bcd(x is 0x0104, &y):
		y = 0 //114
		a = 0 //115
		peekdig(x is 0x0104, a):
			b = *x is '-' //22
			a is 0 //25
			a = *x++ (x is 0x0105) is '-' //27
			b = *x is '6' //28
		x += 1 is 0x0106 //121
		y -= 5 is -5 //122
		y += 6 is 1 //124
		b &= 0x0f is 6 //125
		s[-1] = b is 6 //126
		peekdig(x is 0x0106, a is '-'):
			b = 'x' //22
		b is 'x' //131
		a is '-' //135
		d16ngtv(y is 1, s):
			// return PC is at s[-3],s[-2]
			d0to32k(y is 1, s):
			// return PC is at s[-3],s[-2]
			s[-5] = x is preserved as 0x0106 //32
			x = 0 //33
			s[-7] = y is 1 //34
			d = &s[-2] //38
			b = d[y] is 6 //40
			x += b is 6 //41
			y -= 1 is 0 //42
			y = x is 1 //43
			d = s[-7] is 1 /* elements to pop */ //45
			x = s[-5] is preserved as 0x0106 //46
			x = -x is -6 //59
		s popped back to &s[0] //140
	b is 1 /* characters converted */ //48
	a = *x++ is 'x' (x is 0x0107) //50
	a -= 1 is 'w' //57
	a &= 0xc0 is 0x60 //58
	b = *x++ is '+' (x is 0x0108) //60
	'+' > '4' //63
	b = '1' //65
	d = (b * 2) & 0x06 is '2' //71
	d += 2 is 4 //72
	d += s is &s[b - '0'] //74
	y is &s[b - '0'], d is 1 //75
        s[b - '0'] += y is -6 //76

	x <= s[10] is 0x010a //45
	